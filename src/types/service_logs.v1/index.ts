/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/service_logs/v1/cluster_logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all service logs
     * @deprecated
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size
           *      */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username
           *     starting with `my`:
           *     ```sql
           *     username like 'my%'\n
           *     ```
           *
           *     > **Important Note**:
           *     OCM Service Log uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions
           *     labeled by `foo=bar`,
           *
           *     ```sql
           *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be returned."
           *      */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_
           *     first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field>
           *     notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and
           *     labels (all fields)
           *
           *     ```
           *     ocm get subscriptions \
           *       --parameter fields=id,href,plan.id,plan.kind,labels.* \
           *       --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
          /** @description Get log records in various format types (eg. csv/json) */
          format?: components['parameters']['format'];
          /** @description If true, includes the account reference information in the output.
           *     Could slow request response time.
           *      */
          fetchAccounts?: components['parameters']['fetchAccounts'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of Cluster Service records */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterLogList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new log record */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Log record */
      requestBody: {
        content: {
          'application/json': components['schemas']['ClusterLog'];
        };
      };
      responses: {
        /** @description Log record was Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterLog'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the log */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/service_logs/v1/cluster_logs/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get log by record id */
    get: {
      parameters: {
        query?: {
          /** @description Id of a cluster (cluster_id) */
          cluster_id?: components['parameters']['cluster_id'];
          /** @description Id of a subscription (subscription_id) */
          subscription_id?: components['parameters']['subscription_id'];
          /** @description Id of an organization (organization_id) */
          organization_id?: components['parameters']['organization_id'];
        };
        header?: never;
        path: {
          /** @description The id of the record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON of the log record */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterLog'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete log record by record id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Log record successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No log record with specified id exist */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the log records */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/service_logs/v1/clusters/cluster_logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all service logs for a cluster specified by cluster_id and/or cluster_uuid */
    get: {
      parameters: {
        query: {
          'any-id': components['parameters']['any_id'];
          /** @description Page number of record list when record list exceeds specified page size
           *      */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username
           *     starting with `my`:
           *     ```sql
           *     username like 'my%'\n
           *     ```
           *
           *     > **Important Note**:
           *     OCM Service Log uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions
           *     labeled by `foo=bar`,
           *
           *     ```sql
           *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be returned."
           *      */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_
           *     first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field>
           *     notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and
           *     labels (all fields)
           *
           *     ```
           *     ocm get subscriptions \
           *       --parameter fields=id,href,plan.id,plan.kind,labels.* \
           *       --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
          /** @description Get log records in various format types (eg. csv/json) */
          format?: components['parameters']['format'];
          /** @description If true, includes the account reference information in the output.
           *     Could slow request response time.
           *      */
          fetchAccounts?: components['parameters']['fetchAccounts'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array or CSV of Cluster Service records */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterLogList'];
            'text/csv': string;
          };
        };
        /** @description Bad request: At least one of cluster_uuid and cluster_id is required */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/service_logs/v1/clusters/{uuid}/cluster_logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all service logs for a specific cluster */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size
           *      */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username
           *     starting with `my`:
           *     ```sql
           *     username like 'my%'\n
           *     ```
           *
           *     > **Important Note**:
           *     OCM Service Log uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions
           *     labeled by `foo=bar`,
           *
           *     ```sql
           *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be returned."
           *      */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_
           *     first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field>
           *     notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and
           *     labels (all fields)
           *
           *     ```
           *     ocm get subscriptions \
           *       --parameter fields=id,href,plan.id,plan.kind,labels.* \
           *       --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
          /** @description Get log records in various format types (eg. csv/json) */
          format?: components['parameters']['format'];
          /** @description If true, includes the account reference information in the output.
           *     Could slow request response time.
           *      */
          fetchAccounts?: components['parameters']['fetchAccounts'];
          /** @description Id of a cluster (cluster_id) */
          cluster_id?: components['parameters']['cluster_id'];
          /** @description Id of a subscription (subscription_id) */
          subscription_id?: components['parameters']['subscription_id'];
          /** @description Id of an organization (organization_id) */
          organization_id?: components['parameters']['organization_id'];
        };
        header?: never;
        path: {
          /** @description UUID of the record (clusterUUID) */
          uuid: components['parameters']['uuid'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array or CSV of Cluster Service records */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterLogList'];
            'text/csv': string;
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/service_logs/v1/warehouse': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get number of service logs for clusters specified by a comma-separated cluster_ids and/or cluster_uuids */
    get: {
      parameters: {
        query: {
          'any-id': components['parameters']['any_id'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A number of records found (in `total` field) */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['WarehouseCount'];
          };
        };
        /** @description Bad request: At least one of cluster_uuid and cluster_id is required */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Warehouse service logs for clusters specified by a comma-separated cluster_ids and/or cluster_uuids */
    delete: {
      parameters: {
        query: {
          'any-id': components['parameters']['any_id'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Log records were successfully warehoused */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['WarehouseCount'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No log record with specified id exist */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the log records */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ClusterLog: components['schemas']['ObjectReference'] & {
      /** @description Internal Id of a cluster, required unless cluster_uuid is provided */
      cluster_id?: string;
      /** @description External id of a cluster, required unless cluster_id is provided */
      cluster_uuid?: string;
      /** Format: date-time */
      created_at?: string;
      created_by?: string;
      description?: string;
      doc_references?: string[];
      email?: string;
      event_stream_id?: string;
      first_name?: string;
      /** @default false */
      internal_only: boolean;
      last_name?: string;
      /** @enum {string} */
      log_type: ClusterLogLog_type;
      service_name: string;
      /** @enum {string} */
      severity: ClusterLogSeverity;
      subscription_id?: string;
      summary: string;
      /** Format: date-time */
      timestamp?: string;
      username?: string;
    };
    ClusterLogList: components['schemas']['List'] & {
      items?: components['schemas']['ClusterLog'][];
    };
    Error: components['schemas']['ObjectReference'] & {
      code?: string;
      operation_id?: string;
      reason?: string;
    };
    ErrorList: components['schemas']['List'] & {
      items?: components['schemas']['Error'][];
    };
    List: {
      kind: string;
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      total: number;
    };
    ObjectReference: {
      href?: string;
      id?: string;
      kind?: string;
    };
    WarehouseCount: {
      /** Format: int64 */
      total: number;
    };
  };
  responses: never;
  parameters: {
    any_id: {
      /** @description Id of a cluster (cluster_id) */
      cluster_id?: string;
      /** @description External id of a cluster (cluster_uuid) */
      cluster_uuid?: string;
    };
    /** @description Id of a cluster (cluster_id) */
    cluster_id: string;
    /** @description UUID of a cluster (cluster_uuid) */
    cluster_uuid: string;
    /** @description If true, includes the account reference information in the output.
     *     Could slow request response time.
     *      */
    fetchAccounts: boolean;
    /** @description Supplies a comma-separated list of fields to be returned.
     *     Fields of sub-structures and of arrays use <structure>.<field>
     *     notation.
     *     <stucture>.* means all field of a structure
     *     Example: For each Subscription to get id, href, plan(id and kind) and
     *     labels (all fields)
     *
     *     ```
     *     ocm get subscriptions \
     *       --parameter fields=id,href,plan.id,plan.kind,labels.* \
     *       --parameter fetchLabels=true
     *     ``` */
    fields: string;
    /** @description Get log records in various format types (eg. csv/json) */
    format: string;
    /** @description The id of the record */
    id: string;
    /** @description Specifies the order by criteria. The syntax of this parameter is
     *     similar to the syntax of the _order by_ clause of an SQL statement,
     *     but using the names of the json attributes / column of the account.
     *     For example, in order to retrieve all accounts ordered by username:
     *
     *     ```sql
     *     username asc
     *     ```
     *
     *     Or in order to retrieve all accounts ordered by username _and_
     *     first name:
     *
     *     ```sql
     *     username asc, firstName asc
     *     ```
     *
     *     If the parameter isn't provided, or if the value is empty, then
     *     no explicit ordering will be applied. */
    orderBy: string;
    /** @description Id of an organization (organization_id) */
    organization_id: string;
    /** @description Page number of record list when record list exceeds specified page size
     *      */
    page: number;
    /** @description Specifies the search criteria. The syntax of this parameter is
     *     similar to the syntax of the _where_ clause of an SQL statement,
     *     using the names of the json attributes / column names of the account.
     *     For example, in order to retrieve all the accounts with a username
     *     starting with `my`:
     *     ```sql
     *     username like 'my%'\n
     *     ```
     *
     *     > **Important Note**:
     *     OCM Service Log uses **KSUID** as an **ID** field.
     *     KSUID contains a timestamp component that allows them to be sorted by generation time.
     *     As this field uses an index, please use it to sort by instead of `created_at` field.
     *
     *     The search criteria can also be applied on related resource.
     *     For example, in order to retrieve all the subscriptions
     *     labeled by `foo=bar`,
     *
     *     ```sql
     *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
     *     ```
     *
     *     If the parameter isn't provided, or if the value is empty, then
     *     all the accounts that the user has permission to see will be returned."
     *      */
    search: string;
    /** @description Maximum number of records to return */
    size: number;
    /** @description Id of a subscription (subscription_id) */
    subscription_id: string;
    /** @description UUID of the record (clusterUUID) */
    uuid: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type ClusterLog = components['schemas']['ClusterLog'];
export type ClusterLogList = components['schemas']['ClusterLogList'];
export type Error = components['schemas']['Error'];
export type ErrorList = components['schemas']['ErrorList'];
export type List = components['schemas']['List'];
export type ObjectReference = components['schemas']['ObjectReference'];
export type WarehouseCount = components['schemas']['WarehouseCount'];
export type ParameterAnyId = components['parameters']['any_id'];
export type ParameterClusterId = components['parameters']['cluster_id'];
export type ParameterClusterUuid = components['parameters']['cluster_uuid'];
export type ParameterFetchAccounts = components['parameters']['fetchAccounts'];
export type ParameterFields = components['parameters']['fields'];
export type ParameterFormat = components['parameters']['format'];
export type ParameterId = components['parameters']['id'];
export type ParameterOrderBy = components['parameters']['orderBy'];
export type ParameterOrganizationId = components['parameters']['organization_id'];
export type ParameterPage = components['parameters']['page'];
export type ParameterSearch = components['parameters']['search'];
export type ParameterSize = components['parameters']['size'];
export type ParameterSubscriptionId = components['parameters']['subscription_id'];
export type ParameterUuid = components['parameters']['uuid'];
export type $defs = Record<string, never>;
export enum ClusterLogLog_type {
  clustercreate_high_level = 'clustercreate-high-level',
  clustercreate_details = 'clustercreate-details',
  clusterremove_high_level = 'clusterremove-high-level',
  clusterremove_details = 'clusterremove-details',
  cluster_state_updates = 'cluster-state-updates',
  Cluster_Subscription = 'Cluster Subscription',
  Cluster_Lifecycle = 'Cluster Lifecycle',
  Cluster_Updates = 'Cluster Updates',
  Cluster_Ownership = 'Cluster Ownership',
  Cluster_Access = 'Cluster Access',
  Cluster_Scaling = 'Cluster Scaling',
  Capacity_Management = 'Capacity Management',
  Cluster_Configuration = 'Cluster Configuration',
  Cluster_Security = 'Cluster Security',
  Cluster_Add_ons = 'Cluster Add-ons',
  Customer_Support = 'Customer Support',
  Cluster_Networking = 'Cluster Networking',
  General_Notification = 'General Notification',
  cluster_transfer_recipient = 'cluster-transfer-recipient',
}
export enum ClusterLogSeverity {
  Debug = 'Debug',
  Info = 'Info',
  Warning = 'Warning',
  Major = 'Major',
  Critical = 'Critical',
}
export type operations = Record<string, never>;
